{"version":3,"sources":["components/ResultScreen.js","components/Button.js","components/ScientificMode.js","components/Calculator.js","contexts/ThemeContext.js","components/ThemeTogglerButton.js","App.js","reportWebVitals.js","index.js"],"names":["ResultScreen","props","result","Button","className","keyValue","clickHandler","onClick","ScientificMode","Calculator","useState","setResult","prevOperand","setPrevOperand","valList","setValList","sciMode","setSciMode","baseOperands","scientificOperands","CalculatorOperations","firstVal","secondVal","Math","pow","sqrt","handleOperation","value","includes","operand","length","Number","join","sciCalculate","calculate","newList","push","showCurrentValue","list","lastVal","map","Themes","ThemeContext","React","createContext","theme","ThemeTogglerButton","App","currentTheme","setCurrentTheme","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.492a150f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction ResultScreen(props) {\r\n    return (\r\n        <div>\r\n            <p>{props.result}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResultScreen;","import React from 'react';\r\n\r\nfunction Button({ className, keyValue, clickHandler }) {\r\n    return (\r\n        <button className={`${className}`} onClick={() => clickHandler(keyValue)}>\r\n            {keyValue}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nfunction ScientificMode({ keyValue, clickHandler, className }) {\r\n    return (\r\n        <>\r\n            <button className={`${className}`} onClick={() => clickHandler(keyValue)}>\r\n                {keyValue}\r\n            </button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ScientificMode;","import React, { useState } from 'react';\r\nimport ResultScreen from './ResultScreen';\r\nimport Button from './Button';\r\nimport ScientificMode from './ScientificMode'\r\n\r\nfunction Calculator() {\r\n    const [result, setResult] = useState(0);\r\n    const [prevOperand, setPrevOperand] = useState();\r\n    const [valList, setValList] = useState([]);\r\n    const [sciMode, setSciMode] = useState(false);\r\n\r\n    const calcKeyValues = ['1', '2', '3', '+', '4', '5', '6', '-', '7', '8', '9', '*', 'Clear', '0', '=', '/'];\r\n    const baseOperands = ['+', '-', '*', '/', 'Clear', '='];\r\n    const scientificOperands = ['+/-', 'sq', 'sqrt'];\r\n\r\n    const CalculatorOperations = {\r\n        \"/\": (firstVal, secondVal) => secondVal ? firstVal / secondVal : firstVal,\r\n        \"*\": (firstVal, secondVal) => secondVal ? firstVal * secondVal : firstVal,\r\n        \"+\": (firstVal, secondVal) => firstVal + secondVal,\r\n        \"-\": (firstVal, secondVal) => firstVal - secondVal,\r\n        \"=\": (firstVal, secondVal) => secondVal || firstVal,\r\n        \"+/-\": (firstVal) => firstVal ? - firstVal : 0,\r\n        \"sq\": (firstVal) => Math.pow(firstVal, 2),\r\n        'sqrt': (firstVal) => Math.sqrt(firstVal)\r\n    };\r\n\r\n    const sciCalculate = (operand) => {\r\n        if (valList.length > 0) {\r\n            const firstVal = Number(valList[0].join(''));\r\n            const result = CalculatorOperations[operand](firstVal);\r\n            setValList([[result], []])\r\n            setResult(result);\r\n        }\r\n    }\r\n\r\n    const calculate = (operand) => {\r\n        if (operand === 'Clear') {\r\n            setValList([])\r\n            setResult(0);\r\n            setPrevOperand();\r\n            return;\r\n        }\r\n        if (valList.length > 1 && prevOperand) {\r\n            const firstVal = Number(valList[0].join(''));\r\n            let secondVal = Number(valList[1].join(''));\r\n            if (valList.length > 2) {\r\n                // for negative number scenarios\r\n                secondVal = Number(valList[2].join(''));\r\n            }\r\n            const result = CalculatorOperations[prevOperand](firstVal, secondVal);\r\n            setValList([[result], []])\r\n            setResult(result);\r\n        }\r\n        setPrevOperand(operand);\r\n    }\r\n\r\n    // handler for every button click\r\n    const handleOperation = (value) => {\r\n        // For scientific mode calculations\r\n        if (scientificOperands.includes(value)) {\r\n            sciCalculate(value);\r\n            return;\r\n        }\r\n        if (baseOperands.includes(value)) {\r\n            setValList([...valList, []]);\r\n            calculate(value);\r\n        } else {\r\n            const newList = [...valList];\r\n            if (!valList.length) {\r\n                newList.push([])\r\n            }\r\n            newList[newList.length - 1].push(value);\r\n            setValList(newList);\r\n            showCurrentValue(newList);\r\n        }\r\n    }\r\n\r\n    const showCurrentValue = (list) => {\r\n        const lastVal = list[list.length - 1].join('');\r\n        setResult(lastVal);\r\n    }\r\n\r\n    // Scientific Mode toggle Handler\r\n    const handleScientificMode = () => {\r\n        sciMode ? setSciMode(false) : setSciMode(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"calculator\">\r\n            <div className=\"result-screen\">\r\n                <ResultScreen result={result} />\r\n            </div>\r\n            <div className=\"calculator-numbers\">\r\n                {calcKeyValues.map((keyValue) =>\r\n                    <Button key={keyValue} className=\"button\" keyValue={keyValue} clickHandler={handleOperation} />\r\n                )}\r\n            </div>\r\n            <div>\r\n                <ScientificMode keyValue={'Scientific Mode'} className=\"button\" clickHandler={handleScientificMode} />\r\n                {sciMode && <div>\r\n                    {scientificOperands.map((keyValue) =>\r\n                        <Button keyValue={keyValue} className=\"button\" clickHandler={handleOperation} />\r\n                    )}\r\n                </div>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\r\n\r\nexport const Themes = {\r\n    light: 'light',\r\n    dark: 'dark',\r\n}\r\n\r\nconst ThemeContext = React.createContext({\r\n    theme: Themes.light // given default context as 'light'\r\n});\r\n\r\nexport default ThemeContext;\r\n\r\n","import React from 'react';\r\nimport { Themes } from '../contexts/ThemeContext';\r\n\r\nfunction ThemeTogglerButton({ className, clickHandler }) {\r\n\r\n    return (\r\n        <div>\r\n            <button className={`${className}`} onClick={() => clickHandler(Themes.light)}>\r\n                Light Theme\r\n            </button>\r\n            <button className={`${className}`} onClick={() => clickHandler(Themes.dark)}>\r\n                Dark Theme\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ThemeTogglerButton;","import { useState } from 'react';\nimport './styles/style.css';\nimport Calculator from './components/Calculator';\nimport ThemeTogglerButton from './components/ThemeTogglerButton';\nimport ThemeContext from './contexts/ThemeContext';\nimport { Themes } from './contexts/ThemeContext';\n\nfunction App() {\n  const [currentTheme, setCurrentTheme] = useState(Themes.light);\n\n  return (\n    <ThemeContext.Provider value={currentTheme}>\n      <div className={`App ${currentTheme}`} >\n        <ThemeTogglerButton className=\"button\" clickHandler={setCurrentTheme} />\n        <Calculator />\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}